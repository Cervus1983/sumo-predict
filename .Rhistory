head(test.data)
str(test.data)
addFeatures(withOrdinals(train.data))
addFeatures <- function(df) {
df %>% mutate(
win1 = as.factor(win1),
win2 = as.factor(win2),
below = ordinal1 - ordinal2,
level1 = as.ordered(substr(rank1, 1, 1)),
level2 = as.ordered(substr(rank2, 1, 1))
)
}
head(addFeatures(withOrdinals(train.data)))
str(addFeatures(withOrdinals(train.data)))
str(addFeatures(withOrdinals(test.data)))
t <- predict(
model,
addFeatures(withOrdinals(test.data)),
type = "prob"
)
model <- randomForest::randomForest(
formula = win1 ~ ordinal1 + ordinal2 + below + level1 + level2,
data = addFeatures(withOrdinals(train.data)),
importance = TRUE
)
t <- predict(
model,
addFeatures(withOrdinals(test.data)),
type = "prob"
)
t
str(t)
source("models/randomForest.R")
analyse("randomForest")
?evaluate
train.data <- clean(
rbind(
sumodbBoutQuery(basho = "2015", division = "m"),
sumodbBoutQuery(basho = "2016.01", division = "m"),
sumodbBoutQuery(basho = "2016.03", division = "m"),
sumodbBoutQuery(basho = "2016.05", division = "m"),
sumodbBoutQuery(basho = "2016.07", division = "m"),
sumodbBoutQuery(basho = "2016.09", division = "m")
)
)
test.data <- clean(sumodbBoutQuery(basho = "2016.11", division = "m"))
evaluate("randomGuess")
evaluate <- function(model) {
graphics.off()
pred <- prediction(
predictions = do.call(model, list(train.data, test.data)),
labels = test.data$win1
)
# ROC curve	(AUC in the title)
windows()
plot(
performance(pred, measure = "tpr", x.measure = "fpr"),
colorize = TRUE,
main = sprintf("AUC = %.1f%%", unlist(performance(pred, "auc")@y.values) * 100)
)
lines(x = c(0, 1), y = c(0, 1))
# cutoff plot
windows()
acc = performance(pred, "acc")
ac.val = max(unlist(acc@y.values))
th = unlist(acc@x.values)[unlist(acc@y.values) == ac.val]
plot(
acc,
main = paste("Cutoff:", paste(sprintf("%.1f%%", th[order(th)] * 100), collapse = ", ")),
xlab = ""
)
abline(v = th, col = "grey", lty = 2)
}
# evaluate models one by one
evaluate("randomGuess")
evaluate("histWinRate") # AUC = 61.6%
evaluate("randomForest") # AUC = 61.8%
if(TRUE) {
train.data <- clean(
rbind(
sumodbBoutQuery(basho = "2016.01", division = "m"),
sumodbBoutQuery(basho = "2016.03", division = "m"),
sumodbBoutQuery(basho = "2016.05", division = "m"),
sumodbBoutQuery(basho = "2016.07", division = "m"),
sumodbBoutQuery(basho = "2016.09", division = "m")
)
)
test.data <- clean(sumodbBoutQuery(basho = "2016.11", division = "m"))
}
head(train.data)
?as.ordered
addFeatures <- function(df) {
df %>% mutate(
win1 = as.factor(win1),
win2 = as.factor(win2),
below = ordinal1 - ordinal2,
level1 = as.ordered(substr(rank1, 1, 1)),
level2 = as.ordered(substr(rank2, 1, 1))
)
}
data = addFeatures(withOrdinals(train.data))
head(data)
str(data)
unique(data$level1)
addFeatures <- function(df) {
df %>% mutate(
win1 = as.factor(win1),
win2 = as.factor(win2),
below = ordinal1 - ordinal2,
level1 = factor(substr(rank1, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
level2 = factor(substr(rank2, 1, 1), levels = c("J", "M", "K", "S", "O", "Y"))
)
}
data = addFeatures(withOrdinals(train.data))
str(data)
unique(data$level1)
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest") # AUC = 61.8%
evaluate("histWinRate") # AUC = 61.6%
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest") # AUC = 61.8%
addFeatures <- function(df) {
withOrdinals(df) %>% mutate(
win1 = as.factor(win1),
win2 = as.factor(win2),
below = ordinal1 - ordinal2,
level1 = factor(substr(rank1, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
level2 = factor(substr(rank2, 1, 1), levels = c("J", "M", "K", "S", "O", "Y"))
)
}
# train model on enriched train.data
model <- randomForest::randomForest(
formula = win1 ~ day + ordinal1 + ordinal2 + below + level1 + level2,
data = addFeatures(train.data),
importance = TRUE
)
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest")
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest")
addFeatures <- function(df) {
withOrdinals(df) %>% mutate(
win1 = as.factor(win1),
win2 = as.factor(win2),
below = ordinal1 - ordinal2,
level1 = factor(substr(rank1, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
level2 = factor(substr(rank2, 1, 1), levels = c("J", "M", "K", "S", "O", "Y"))
)
}
# train model on enriched train.data
model <- randomForest::randomForest(
formula = win1 ~ day + ordinal1 + ordinal2 + below + level1 + level2,
data = addFeatures(train.data),
importance = TRUE
)
importance(model)
randomForest::importance(model)
caret::varImp(model)
install.packages("caret")
randomForest::importance(model)
caret::varImp(model)
varImpPlot(model, type = 2)
?varImpPlot
?importance
randomForest::importance(model)
?caret
caret::varImp(model)
varImpPlot(model, type = 1)
varImpPlot(model, type = 2)
head(train.data)
model <- "randomForest"
predictions = do.call(model, list(train.data, test.data))
head(predictions)
head(test.data)
data = addFeatures(train.data)[c(TRUE, FALSE), ]
head(data)
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
model
predictions = do.call(model, list(train.data, test.data))
head(predictions)
?rep
rep(1:3, each = 2)
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate <- function(model) {
graphics.off()
pred <- prediction(
predictions = do.call(model, list(train.data, test.data)),
labels = test.data$win1
)
# ROC curve	(AUC in the title)
windows()
plot(
performance(pred, measure = "tpr", x.measure = "fpr"),
colorize = TRUE,
main = sprintf("AUC = %.1f%%", unlist(performance(pred, "auc")@y.values) * 100)
)
lines(x = c(0, 1), y = c(0, 1))
# cutoff plot
windows()
acc = performance(pred, "acc")
ac.val = max(unlist(acc@y.values))
th = unlist(acc@x.values)[unlist(acc@y.values) == ac.val]
plot(
acc,
main = paste("Cutoff:", paste(sprintf("%.1f%%", th[order(th)] * 100), collapse = ", ")),
xlab = ""
)
abline(v = th, col = "grey", lty = 2)
}
evaluate("randomForest")
head(test.data)
head(addFeatures(train.data)[c(TRUE, FALSE), ])
head(addFeatures(test.data))
head(addFeatures(test.data)[c(TRUE, FALSE), ])
p <- predict(
fit,
addFeatures(test.data)[c(TRUE, FALSE), ],
type = "prob"
)[, 2] # select probability of 1 (first rikishi wins)
fit <- randomForest::randomForest(
formula = win1 ~ ordinal1 + ordinal2 + below + level1 + level2,
data = addFeatures(train.data)[c(TRUE, FALSE), ],
importance = TRUE
)
# predict outcomes for test.data (odd rows)
p <- predict(
fit,
addFeatures(test.data)[c(TRUE, FALSE), ],
type = "prob"
)[, 2] # select probability of 1 (first rikishi wins)
str(p)
str(1-p)
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate <- function(model) {
graphics.off()
pred <- prediction(
predictions = do.call(model, list(train.data, test.data)),
labels = test.data$win1
)
# ROC curve	(AUC in the title)
windows()
plot(
performance(pred, measure = "tpr", x.measure = "fpr"),
colorize = TRUE,
main = sprintf("AUC = %.1f%%", unlist(performance(pred, "auc")@y.values) * 100)
)
lines(x = c(0, 1), y = c(0, 1))
# cutoff plot
windows()
acc = performance(pred, "acc")
ac.val = max(unlist(acc@y.values))
th = unlist(acc@x.values)[unlist(acc@y.values) == ac.val]
plot(
acc,
main = paste("Cutoff:", paste(sprintf("%.1f%%", th[order(th)] * 100), collapse = ", ")),
xlab = ""
)
abline(v = th, col = "grey", lty = 2)
}
evaluate("randomGuess")
evaluate("histWinRate") # AUC = 61.6%
evaluate("randomForest")
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest")
model
predictions = do.call(model, list(train.data, test.data))
head(predictions)
head(predictions[c(TRUE, FALSE)])
predictions[c(TRUE, FALSE)] + predictions[c(FALSE, TRUE)]
head(train.data)
result1 <- "1-0 (7-8)"
str_match(result1, "^(.+)-")[, 2]
str_match(result1, "^([^-]+)-")[, 2]
str_match(result1, "^([0-9]+)-([0-9]+)")[, 2]
str_match(result1, "^([0-9]+)-([0-9]+)")
str_match(result1, "^([0-9]+)-([0-9]+)")[, 2:3]
as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 2:3])
as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 2])
as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 2]) - 1
addFeatures <- function(df) {
withOrdinals(df) %>% mutate(
win1 = as.factor(win1),
win2 = as.factor(win2),
below = ordinal1 - ordinal2,
level1 = factor(substr(rank1, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
level2 = factor(substr(rank2, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
wins.before1 <- as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 2]) - win1,
wins.before2 <- as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 2]) - win2
)
}
data = addFeatures(train.data)[c(TRUE, FALSE), ]
addFeatures <- function(df) {
withOrdinals(df) %>% mutate(
below = ordinal1 - ordinal2,
level1 = factor(substr(rank1, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
level2 = factor(substr(rank2, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
wins.before1 <- as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 2]) - win1,
wins.before2 <- as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 2]) - win2,
win1 = as.factor(win1),
win2 = as.factor(win2),
)
}
data = addFeatures(train.data)[c(TRUE, FALSE), ]
addFeatures <- function(df) {
withOrdinals(df) %>% mutate(
below = ordinal1 - ordinal2,
level1 = factor(substr(rank1, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
level2 = factor(substr(rank2, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
wins.before1 <- as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 2]) - win1,
wins.before2 <- as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 2]) - win2,
win1 = as.factor(win1),
win2 = as.factor(win2)
)
}
data = addFeatures(train.data)[c(TRUE, FALSE), ]
head(data)
tail(data)
addFeatures <- function(df) {
withOrdinals(df) %>% mutate(
below = ordinal1 - ordinal2,
level1 = factor(substr(rank1, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
level2 = factor(substr(rank2, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
wins.before1 = as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 2]) - win1,
wins.before2 = as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 2]) - win2,
win.rate.before1 = win.before1 / (wins.before1 + as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 3])),
win.rate.before2 = win.before2 / (wins.before2 + as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 3])),
win1 = as.factor(win1),
win2 = as.factor(win2)
)
}
data = addFeatures(train.data)[c(TRUE, FALSE), ]
addFeatures <- function(df) {
withOrdinals(df) %>% mutate(
below = ordinal1 - ordinal2,
level1 = factor(substr(rank1, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
level2 = factor(substr(rank2, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
wins.before1 = as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 2]) - win1,
wins.before2 = as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 2]) - win2,
win.rate.before1 = wins.before1 / (wins.before1 + as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 3])),
win.rate.before2 = wins.before2 / (wins.before2 + as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 3])),
win1 = as.factor(win1),
win2 = as.factor(win2)
)
}
data = addFeatures(train.data)[c(TRUE, FALSE), ]
tail(data)
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest")
evaluate("randomForest")
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest") # 62.3%
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest") # 62.3%
head(data)
addFeatures <- function(df) {
withOrdinals(df) %>% mutate(
below = ordinal1 - ordinal2,
level1 = factor(substr(rank1, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
level2 = factor(substr(rank2, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
wins.before1 = as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 2]) - win1,
wins.before2 = as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 2]) - win2,
defeats.before1 = as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 3]),
defeats.before2 = as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 3]),
win.rate.before1 = ifelse(wins.before1 + defeats.before1 == 0, NA, wins.before1 / (wins.before1 + defeats.before1)),
win.rate.before2 = ifelse(wins.before2 + defeats.before2 == 0, NA, wins.before2 / (wins.before2 + defeats.before2)),
win1 = as.factor(win1),
win2 = as.factor(win2)
)
}
data = addFeatures(train.data)[c(TRUE, FALSE), ]
head(data, 50)
addFeatures <- function(df) {
withOrdinals(df) %>% mutate(
below = ordinal1 - ordinal2,
level1 = factor(substr(rank1, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
level2 = factor(substr(rank2, 1, 1), levels = c("J", "M", "K", "S", "O", "Y")),
wins.before1 = as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 2]) - win1,
wins.before2 = as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 2]) - win2,
defeats.before1 = as.integer(str_match(result1, "^([0-9]+)-([0-9]+)")[, 3]) - win2,
defeats.before2 = as.integer(str_match(result2, "^([0-9]+)-([0-9]+)")[, 3]) - win1,
win.rate.before1 = ifelse(wins.before1 + defeats.before1 == 0, NA, wins.before1 / (wins.before1 + defeats.before1)),
win.rate.before2 = ifelse(wins.before2 + defeats.before2 == 0, NA, wins.before2 / (wins.before2 + defeats.before2)),
win1 = as.factor(win1),
win2 = as.factor(win2)
)
}
data = addFeatures(train.data)[c(TRUE, FALSE), ]
head(data, 50)
head(data, 50)
head(data %>% select(-basho, -kimarite), 50)
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest") # 62.3%
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest") # 62.3%
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest") # 62.3%
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest") # 62.3%
if(TRUE) {
# random guess: picks a number from a beta distribution
source("models/randomGuess.R")
# simple approach: historical win rate for given difference in rank
source("models/histWinRate.R")
# random forest
source("models/randomForest.R")
}
evaluate("randomForest") # 62.3%
